//
//  ViewController.swift
//  ImageRegonizer
//
//  Created by Wilmer sinchi on 7/7/19.
//  Copyright Â© 2019 Wilmer sinchi. All rights reserved.
//

import UIKit
import Vision
import Photos

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var doughnutLabel: UILabel!
    @IBOutlet weak var bagelsLabel: UILabel!
    
    var picker = UIImagePickerController()
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view.
        picker.delegate = self
        checkPermission()
        
    }
    
    func checkPermission() {
        let photoAuthorizationStatus = PHPhotoLibrary.authorizationStatus()
        switch photoAuthorizationStatus {
        case .authorized:
            print("Access is granted by user")
        case .notDetermined:
            PHPhotoLibrary.requestAuthorization({
                (newStatus) in
                print("status is \(newStatus)")
                if newStatus ==  PHAuthorizationStatus.authorized {
                    /* do stuff here */
                    print("success")
                }
            })
            print("It is not determined until now")
        case .restricted:
            // same same
            print("User do not have access to photo album.")
        case .denied:
            // same same
            print("User has denied the permission.")
        @unknown default:
            print("error")
        }
    }
    
    @objc func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        //specifying the image
        if let image = info[.originalImage] as? UIImage{
            imageView.image = image
            proccessImaage(image: image)
            
        }
        picker.dismiss(animated: true, completion: nil)
        
    }
    
    
    func proccessImaage(image: UIImage) {
        //A container for a Core ML model used with Vision requests.
        guard let model = try? VNCoreMLModel(for: Bagel_DoughnutsClassifier_1().model) else {return}
        //if it is succesfull then we would have the unwrapped model
        //An image analysis request that uses a Core ML model to process images.
        //result =The collection of VNObservation results generated by request processing.
        // VNCLassificationObservation Classification information produced by an image analysis request.
        let request = VNCoreMLRequest(model: model) { (request, error) in
            guard let results = request.results as? [VNClassificationObservation] else {return}
            for result in results {
                print("\(result.identifier): \(result.confidence * 100)%")
                
                if result.identifier == "bagels" {
                    let resultRounded = Int((result.confidence * 100.0).rounded())
                    self.bagelsLabel.text = "\(resultRounded)"
                    
                }
                
                if result.identifier == "doughnuts" {
                    let resultRounded = Int((result.confidence * 100.0).rounded())
                    self.doughnutLabel.text = "\(resultRounded)"
                    
                }
                
                
            }
            
            
        }
        guard let imageData = image.jpegData(compressionQuality: 1.0) else {return}
        let handler = VNImageRequestHandler(data: imageData, options: [:])
        try? handler.perform([request])
        
        
    }
    
    @IBAction func photoGalleryTap(_ sender: Any) {
        
        picker.sourceType = .photoLibrary
        present(picker, animated: true, completion: nil)
        
        
    }
    @IBAction func cameraTap(_ sender: Any) {
        picker.sourceType = .camera
        
        
        
        
    }

}

